name: Deploy to Kubernetes

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run check

    - name: Run tests
      run: npm test
      if: success()

    - name: Run security audit
      run: npm audit --audit-level moderate
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ matrix.component == 'frontend' && env.IMAGE_NAME_FRONTEND || env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ matrix.component == 'frontend' && env.IMAGE_NAME_FRONTEND || env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
        kubectl config current-context

    - name: Deploy to staging
      run: |
        # Update image tags in manifests
        sed -i "s|rideconnect-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" k8s/overlays/staging/kustomization.yaml
        sed -i "s|rideconnect-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" k8s/overlays/staging/kustomization.yaml
        
        # Apply configurations
        kubectl apply -k k8s/overlays/staging/
        
        # Wait for rollout
        kubectl rollout status deployment/rideconnect-frontend -n rideconnect-staging --timeout=300s
        kubectl rollout status deployment/rideconnect-backend -n rideconnect-staging --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=rideconnect-frontend -n rideconnect-staging --timeout=60s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=rideconnect-backend -n rideconnect-staging --timeout=60s
        
        # Basic health checks
        kubectl exec -n rideconnect-staging deployment/rideconnect-backend -- curl -f http://localhost:3000/health
        kubectl exec -n rideconnect-staging deployment/rideconnect-frontend -- curl -f http://localhost:80/health

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > $HOME/.kube/config
        kubectl config current-context

    - name: Blue-Green Deployment
      run: |
        # Update image tags
        sed -i "s|rideconnect-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}|g" k8s/overlays/production/kustomization.yaml
        sed -i "s|rideconnect-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}|g" k8s/overlays/production/kustomization.yaml
        
        # Apply new configuration
        kubectl apply -k k8s/overlays/production/
        
        # Wait for rollout with longer timeout for production
        kubectl rollout status deployment/rideconnect-frontend -n rideconnect --timeout=600s
        kubectl rollout status deployment/rideconnect-backend -n rideconnect --timeout=600s

    - name: Production Health Check
      run: |
        # Comprehensive health checks
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=rideconnect-frontend -n rideconnect --timeout=120s
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=rideconnect-backend -n rideconnect --timeout=120s
        
        # API health check
        kubectl exec -n rideconnect deployment/rideconnect-backend -- curl -f http://localhost:3000/health
        kubectl exec -n rideconnect deployment/rideconnect-backend -- curl -f http://localhost:3000/ready
        
        # Frontend health check
        kubectl exec -n rideconnect deployment/rideconnect-frontend -- curl -f http://localhost:80/health

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        kubectl rollout undo deployment/rideconnect-frontend -n rideconnect
        kubectl rollout undo deployment/rideconnect-backend -n rideconnect
        kubectl rollout status deployment/rideconnect-frontend -n rideconnect --timeout=300s
        kubectl rollout status deployment/rideconnect-backend -n rideconnect --timeout=300s

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          RideConnect deployment to production: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}