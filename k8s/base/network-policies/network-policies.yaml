# Network policies for security segmentation
# These policies implement zero-trust networking within the namespace

# Default deny all ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: default-deny-ingress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
---
# Allow ingress traffic to frontend from ingress controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-ingress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: allow-frontend-ingress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rideconnect-frontend
      app.kubernetes.io/component: frontend
  policyTypes:
  - Ingress
  ingress:
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
  # Allow health checks from any namespace (for load balancers)
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
---
# Allow ingress traffic to backend from frontend and ingress controller
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-ingress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: allow-backend-ingress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rideconnect-backend
      app.kubernetes.io/component: backend
  policyTypes:
  - Ingress
  ingress:
  # Allow traffic from frontend pods
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: rideconnect-frontend
    ports:
    - protocol: TCP
      port: 3000
  # Allow traffic from ingress controller for API calls
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  # Allow monitoring traffic from Prometheus
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  # Allow health checks from any namespace (for load balancers)
  - from: []
    ports:
    - protocol: TCP
      port: 3000
---
# Allow backend to connect to external database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-database-egress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: allow-backend-database-egress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: rideconnect-backend
      app.kubernetes.io/component: backend
  policyTypes:
  - Egress
  egress:
  # Allow connection to MongoDB (external or in-cluster)
  - to: []  # Allow all external traffic for MongoDB Atlas
    ports:
    - protocol: TCP
      port: 27017
  # Allow connection to in-cluster MongoDB if using StatefulSet
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: rideconnect-mongodb
    ports:
    - protocol: TCP
      port: 27017
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS for external APIs (Stripe, Google Calendar)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
---
# Allow monitoring traffic to all pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring-ingress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: allow-monitoring-ingress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  # Allow Prometheus to scrape metrics
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000  # Backend metrics
    - protocol: TCP
      port: 80   # Frontend nginx status
  # Allow monitoring from any monitoring tools
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: monitoring
---
# Allow DNS egress for all pods
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: allow-dns-egress
    app.kubernetes.io/component: network-policy
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53