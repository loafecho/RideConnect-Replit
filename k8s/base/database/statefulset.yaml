# Optional: In-cluster MongoDB StatefulSet (for development/staging)
# WARNING: Only use this for development. Use managed MongoDB for production.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rideconnect-mongodb
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: rideconnect-mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  serviceName: rideconnect-mongodb-headless
  replicas: 1  # Single instance for development
  selector:
    matchLabels:
      app.kubernetes.io/name: rideconnect-mongodb
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rideconnect-mongodb
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: rideconnect-platform
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: mongodb
        image: mongo:7.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-auth
              key: root-password
        - name: MONGO_INITDB_DATABASE
          value: "rideconnect"
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /data/configdb
      volumes:
      - name: mongodb-config
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app.kubernetes.io/name: rideconnect-mongodb
        app.kubernetes.io/component: database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: fast-ssd  # Adjust based on your cluster
---
apiVersion: v1
kind: Service
metadata:
  name: rideconnect-mongodb-headless
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: rideconnect-mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 27017
    targetPort: mongodb
    protocol: TCP
    name: mongodb
  selector:
    app.kubernetes.io/name: rideconnect-mongodb
    app.kubernetes.io/component: database
---
apiVersion: v1
kind: Service
metadata:
  name: rideconnect-mongodb
  namespace: rideconnect
  labels:
    app.kubernetes.io/name: rideconnect-mongodb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: rideconnect-platform
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: mongodb
    protocol: TCP
    name: mongodb
  selector:
    app.kubernetes.io/name: rideconnect-mongodb
    app.kubernetes.io/component: database