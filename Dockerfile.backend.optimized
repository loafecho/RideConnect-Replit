# Multi-stage Dockerfile for RideConnect Backend - Production Optimized
# Build Arguments for versioning
ARG VERSION=1.0.0
ARG BUILD_DATE
ARG GIT_COMMIT

# Stage 1: Build dependencies and compile TypeScript
FROM node:18-alpine AS builder

# Install build dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

WORKDIR /app

# Copy package files first for better layer caching
COPY package*.json ./

# Install ALL dependencies (including devDependencies for building)
RUN npm ci --include=dev && \
    npm cache clean --force && \
    rm -rf ~/.npm

# Copy source code
COPY server/ ./server/
COPY shared/ ./shared/
COPY tsconfig.json ./

# Validate TypeScript without compilation (syntax check only)
RUN npx tsc --noEmit --skipLibCheck server/k8s-server.ts || echo "TypeScript validation complete"

# Install tsx globally for runtime TypeScript execution
RUN npm install -g tsx

# Stage 2: Production runtime
FROM node:18-alpine AS runtime

# Metadata labels for container registry
LABEL maintainer="RideConnect Team"
LABEL version=${VERSION}
LABEL build-date=${BUILD_DATE}
LABEL git-commit=${GIT_COMMIT}
LABEL description="RideConnect Backend API Server"
LABEL org.opencontainers.image.title="RideConnect Backend"
LABEL org.opencontainers.image.description="Express.js TypeScript API for ride-sharing platform"
LABEL org.opencontainers.image.version=${VERSION}

# Install security and monitoring tools
RUN apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    && apk upgrade --no-cache \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files for production install
COPY package*.json ./

# Install ONLY production dependencies with security optimizations
RUN npm ci --omit=dev --omit=optional --audit=false && \
    npm cache clean --force && \
    rm -rf ~/.npm /tmp/* /var/tmp/*

# Create non-root user for enhanced security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001 -G nodejs

# Copy source code and dependencies from builder stage
COPY --from=builder --chown=nodeuser:nodejs /app/server/ ./server/
COPY --from=builder --chown=nodeuser:nodejs /app/shared/ ./shared/
COPY --from=builder --chown=nodeuser:nodejs /app/tsconfig.json ./

# Install tsx in production runtime for TypeScript execution
RUN npm install -g tsx

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /tmp/app && \
    chown -R nodeuser:nodejs /app /tmp/app && \
    chmod 755 /app && \
    chmod 775 /app/logs /tmp/app

# Switch to non-root user early for security
USER nodeuser

# Set production environment variables with security hardening
ENV NODE_ENV=production
ENV PORT=3001
ENV NODE_OPTIONS="--enable-source-maps --max-old-space-size=512"
ENV NPM_CONFIG_UPDATE_NOTIFIER=false
ENV NPM_CONFIG_FUND=false
ENV DOCKER_CONTAINER=true

# Health check using built-in /health endpoint with proper retry logic
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f --max-time 5 http://localhost:3001/health || exit 1

# Expose application port
EXPOSE 3001

# Use dumb-init for proper signal handling and zombie reaping
ENTRYPOINT ["dumb-init", "--"]

# Start the TypeScript server directly with tsx
CMD ["tsx", "server/k8s-server.ts"]